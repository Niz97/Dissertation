# -*- coding: utf-8 -*-
"""SVM Kernel Trick.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qzAsyU9w7ibHzTKQylQyry_1HnCcaF6w
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import time
import numpy as np

import matplotlib.pyplot as plt
import matplotlib as mpl
from tensorflow import keras
# %matplotlib inline

from sklearn import datasets
from keras.datasets import cifar10
from sklearn.model_selection import train_test_split

(train_images, train_labels), (test_images, test_labels) = keras.datasets.cifar10.load_data()

# Normalise 
train_images, test_images = train_images / 255.0, test_images / 255.0

train_images = np.reshape(train_images, (train_images.shape[0], -1))
train_labels = np.reshape(train_labels, (train_labels.shape[0], -1))
test_images = np.reshape(test_images, (test_images.shape[0], -1))
test_labels = np.reshape(test_labels, (test_labels.shape[0], -1))
# print(train_images)
# print(train_images.shape)
# print(train_labels.shape)

from sklearn import svm
t_labels = np.squeeze(train_labels)

def svm_clf(c, size):
    
  # classifier = svm.SVC(decision_function_shape='ovo')
  classifier = svm.SVC(C = c)

  classifier.fit(train_images[:size], t_labels[:size])

  # pred = classifier.predict(train_images[:size])

  score = classifier.score(train_images[:size], t_labels[:size])
  print(score)
  return classifier

c_svm_linear = [0.1,1]

for c in c_svm_linear:
  print("C: ", c)
  svm_clf(c, 10000)